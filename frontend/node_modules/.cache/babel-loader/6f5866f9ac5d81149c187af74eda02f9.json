{"ast":null,"code":"import cityList from './assets/city.json';\nimport { compare, convertArrayToObject } from './utils';\nconst KEYS = [\"name\", \"countryCode\", \"stateCode\", \"latitude\", \"longitude\"];\nlet convertedCityList = [];\n// Get a list of all cities.\nfunction getAllCities() {\n  let keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : KEYS;\n  if (convertedCityList.length) {\n    return convertedCityList;\n  }\n  const cityJSON = cityList;\n  convertedCityList = convertArrayToObject(keys !== null && keys !== void 0 ? keys : KEYS, cityJSON);\n  return convertedCityList;\n}\n// Get a list of cities belonging to a specific state and country.\nfunction getCitiesOfState(countryCode, stateCode) {\n  if (!stateCode) return [];\n  if (!countryCode) return [];\n  const cityList = getAllCities();\n  const cities = cityList.filter(value => {\n    return value.countryCode === countryCode && value.stateCode === stateCode;\n  });\n  return cities.sort(compare);\n}\n// Get a list of cities belonging to a specific country.\nfunction getCitiesOfCountry(countryCode) {\n  if (!countryCode) return [];\n  const cityList = getAllCities();\n  const cities = cityList.filter(value => {\n    return value.countryCode === countryCode;\n  });\n  return cities.sort(compare);\n}\nfunction sortByStateAndName(cities) {\n  return cities.sort((a, b) => {\n    const result = compare(a, b, entity => {\n      return \"\".concat(entity.countryCode, \"-\").concat(entity.stateCode);\n    });\n    if (result !== 0) return result;\n    return compare(a, b);\n  });\n}\nexport default {\n  getAllCities,\n  getCitiesOfState,\n  getCitiesOfCountry,\n  sortByStateAndName\n};","map":{"version":3,"names":["cityList","compare","convertArrayToObject","KEYS","convertedCityList","getAllCities","keys","arguments","length","undefined","cityJSON","getCitiesOfState","countryCode","stateCode","cities","filter","value","sort","getCitiesOfCountry","sortByStateAndName","a","b","result","entity","concat"],"sources":["C:/Users/SANKET TAVETHIYA/Desktop/MERN PRO/frontend/node_modules/country-state-city/lib/city.js"],"sourcesContent":["import cityList from './assets/city.json';\nimport { compare, convertArrayToObject } from './utils';\nconst KEYS = [\n    \"name\",\n    \"countryCode\",\n    \"stateCode\",\n    \"latitude\",\n    \"longitude\"\n];\nlet convertedCityList = [];\n// Get a list of all cities.\nfunction getAllCities(keys = KEYS) {\n    if (convertedCityList.length) {\n        return convertedCityList;\n    }\n    const cityJSON = cityList;\n    convertedCityList = convertArrayToObject(keys !== null && keys !== void 0 ? keys : KEYS, cityJSON);\n    return convertedCityList;\n}\n// Get a list of cities belonging to a specific state and country.\nfunction getCitiesOfState(countryCode, stateCode) {\n    if (!stateCode)\n        return [];\n    if (!countryCode)\n        return [];\n    const cityList = getAllCities();\n    const cities = cityList.filter((value) => {\n        return value.countryCode === countryCode && value.stateCode === stateCode;\n    });\n    return cities.sort(compare);\n}\n// Get a list of cities belonging to a specific country.\nfunction getCitiesOfCountry(countryCode) {\n    if (!countryCode)\n        return [];\n    const cityList = getAllCities();\n    const cities = cityList.filter((value) => {\n        return value.countryCode === countryCode;\n    });\n    return cities.sort(compare);\n}\nfunction sortByStateAndName(cities) {\n    return cities.sort((a, b) => {\n        const result = compare(a, b, (entity) => {\n            return `${entity.countryCode}-${entity.stateCode}`;\n        });\n        if (result !== 0)\n            return result;\n        return compare(a, b);\n    });\n}\nexport default {\n    getAllCities,\n    getCitiesOfState,\n    getCitiesOfCountry,\n    sortByStateAndName,\n};\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oBAAoB;AACzC,SAASC,OAAO,EAAEC,oBAAoB,QAAQ,SAAS;AACvD,MAAMC,IAAI,GAAG,CACT,MAAM,EACN,aAAa,EACb,WAAW,EACX,UAAU,EACV,WAAW,CACd;AACD,IAAIC,iBAAiB,GAAG,EAAE;AAC1B;AACA,SAASC,YAAYA,CAAA,EAAc;EAAA,IAAbC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGJ,IAAI;EAC7B,IAAIC,iBAAiB,CAACI,MAAM,EAAE;IAC1B,OAAOJ,iBAAiB;EAC5B;EACA,MAAMM,QAAQ,GAAGV,QAAQ;EACzBI,iBAAiB,GAAGF,oBAAoB,CAACI,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAGH,IAAI,EAAEO,QAAQ,CAAC;EAClG,OAAON,iBAAiB;AAC5B;AACA;AACA,SAASO,gBAAgBA,CAACC,WAAW,EAAEC,SAAS,EAAE;EAC9C,IAAI,CAACA,SAAS,EACV,OAAO,EAAE;EACb,IAAI,CAACD,WAAW,EACZ,OAAO,EAAE;EACb,MAAMZ,QAAQ,GAAGK,YAAY,CAAC,CAAC;EAC/B,MAAMS,MAAM,GAAGd,QAAQ,CAACe,MAAM,CAAEC,KAAK,IAAK;IACtC,OAAOA,KAAK,CAACJ,WAAW,KAAKA,WAAW,IAAII,KAAK,CAACH,SAAS,KAAKA,SAAS;EAC7E,CAAC,CAAC;EACF,OAAOC,MAAM,CAACG,IAAI,CAAChB,OAAO,CAAC;AAC/B;AACA;AACA,SAASiB,kBAAkBA,CAACN,WAAW,EAAE;EACrC,IAAI,CAACA,WAAW,EACZ,OAAO,EAAE;EACb,MAAMZ,QAAQ,GAAGK,YAAY,CAAC,CAAC;EAC/B,MAAMS,MAAM,GAAGd,QAAQ,CAACe,MAAM,CAAEC,KAAK,IAAK;IACtC,OAAOA,KAAK,CAACJ,WAAW,KAAKA,WAAW;EAC5C,CAAC,CAAC;EACF,OAAOE,MAAM,CAACG,IAAI,CAAChB,OAAO,CAAC;AAC/B;AACA,SAASkB,kBAAkBA,CAACL,MAAM,EAAE;EAChC,OAAOA,MAAM,CAACG,IAAI,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAK;IACzB,MAAMC,MAAM,GAAGrB,OAAO,CAACmB,CAAC,EAAEC,CAAC,EAAGE,MAAM,IAAK;MACrC,UAAAC,MAAA,CAAUD,MAAM,CAACX,WAAW,OAAAY,MAAA,CAAID,MAAM,CAACV,SAAS;IACpD,CAAC,CAAC;IACF,IAAIS,MAAM,KAAK,CAAC,EACZ,OAAOA,MAAM;IACjB,OAAOrB,OAAO,CAACmB,CAAC,EAAEC,CAAC,CAAC;EACxB,CAAC,CAAC;AACN;AACA,eAAe;EACXhB,YAAY;EACZM,gBAAgB;EAChBO,kBAAkB;EAClBC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}